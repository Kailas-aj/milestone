1. Write a MongoDB query to display at least 10 details of the documents of book id Btitle, authors in array and price for all the documents in the collection Bookstore.


bookstore> db.books.find({},{_id:0,bookname:1,id:1,authors:1,price:1}).limit(10)
[
  { id: 1, bookname: 'mongodbpartice', price: 500 },
  { id: 2, bookname: 'html', price: 600 },
  { id: 3, bookname: 'java', price: 500 },
  { id: 4, bookname: 'harrypotter', price: 700 },
  { id: 5, bookname: 'potter', price: 800 },
  { id: 6, bookname: 'spiderman', price: 100 },
  { id: 7, bookname: 'batman', price: 200 },
  { id: 8, bookname: 'ironman', price: 300 },
  { id: 9, bookname: 'captain america', price: 500 },
  { id: 10, bookname: 'police', price: 700 }
]


2). Write a MongoDB query to display the fields Btitle, authors and price but exclude the bookid for all the documents in the collection Bookstore.
bookstore> db.books.find({}, { _id: 0, bookname: 1, authors: 1, price: 1 })
[
  { bookname: 'mongodbpartice', price: 500 },
  { bookname: 'html', price: 600 },
  { bookname: 'java', price: 500 },
  { bookname: 'harrypotter', price: 700 },
  { bookname: 'potter', price: 800 },
  { bookname: 'spiderman', price: 100 },
  { bookname: 'batman', price: 200 },
  { bookname: 'ironman', price: 300 },
  { bookname: 'captain america', price: 500 },
  { bookname: 'police', price: 700 }
]
bookstore>
3)3. Write a MongoDB query to display the first 3 books based on similar authors.
bookstore> db.books.find().sort({ authors: 1 }).limit(3)
[
  {
    _id: ObjectId("653e0e12491bd2e955531733"),
    id: 1,
    bookname: 'mongodbpartice',
    Authors: [ 'kailas aj' ],
    price: 500
  },
  {
    _id: ObjectId("653e0e12491bd2e955531734"),
    id: 2,
    bookname: 'html',
    Authors: [ 'kailas aj' ],
    price: 600
  },
  {
    _id: ObjectId("653e0e12491bd2e955531735"),
    id: 3,
    bookname: 'java',
    Authors: [ 'kailas aj' ],
    price: 500
  }
]
4. Write a MongoDB query to find the book price more than 1500.


bookstore> db.books.find({ price: { $gt: 1500 } })



5. Write a MongoDB query to find the book title who's price is more than 800 but less than 2000.


bookstore> db.books.find({price:{$gt:500,$lt:2000}},{bookname:1,_id:0 ,})
[
  { bookname: 'html' },
  { bookname: 'harrypotter' },
  { bookname: 'potter' },
  { bookname: 'police' }
]

6. Write a MongoDB query to arrange the book name of the bookstore in ascending
bookstore> db.books.find().sort({ bookname: 1 })
[
  {
    _id: ObjectId("653e0ecb491bd2e955531739"),
    id: 7,
    bookname: 'batman',
    Authors: [ 'peter' ],
    price: 200
  },
  {
    _id: ObjectId("653e0f00491bd2e95553173b"),
    id: 9,
    bookname: 'captain america',
    Authors: [ 'hendry' ],
    price: 500
  },
  {
    _id: ObjectId("653e0e5b491bd2e955531736"),
    id: 4,
    bookname: 'harrypotter',
    Authors: [ 'arun' ],
    price: 700
  },
  {
    _id: ObjectId("653e0e12491bd2e955531734"),
    id: 2,
    bookname: 'html',
    Authors: [ 'kailas aj' ],
    price: 600
  },
  {
    _id: ObjectId("653e0ee2491bd2e95553173a"),
    id: 8,
    bookname: 'ironman',
    Authors: [ 'marks' ],
    price: 300
  },
  {
    _id: ObjectId("653e0e12491bd2e955531735"),
    id: 3,
    bookname: 'java',
    Authors: [ 'kailas aj' ],
    price: 500
  },
  {
    _id: ObjectId("653e0e12491bd2e955531733"),
    id: 1,
    bookname: 'mongodbpartice',
    Authors: [ 'kailas aj' ],
    price: 500
  },
  {
    _id: ObjectId("653e0f2a491bd2e95553173c"),
    id: 10,
    bookname: 'police',
    Authors: [ 'ironsid' ],
    price: 700
  },
  {
    _id: ObjectId("653e0e7a491bd2e955531737"),
    id: 5,
    bookname: 'potter',
    Authors: [ 'geetha', 'manu' ],
    price: 800
  },
  {
    _id: ObjectId("653e0ea6491bd2e955531738"),
    id: 6,
    bookname: 'spiderman',
    Authors: [ 'arjun' ],
    price: 100
  }
]
bookstore>

7.Write a MongoDB query to arrange the book name of the bookstore in ascending order along with all the columns.
bookstore>  db.books.find().sort({ bookname: 1 })
[
  {
    _id: ObjectId("653e0ecb491bd2e955531739"),
    id: 7,
    bookname: 'batman',
    Authors: [ 'peter' ],
    price: 200
  },
  {
    _id: ObjectId("653e0f00491bd2e95553173b"),
    id: 9,
    bookname: 'captain america',
    Authors: [ 'hendry' ],
    price: 500
  },
  {
    _id: ObjectId("653e0e5b491bd2e955531736"),
    id: 4,
    bookname: 'harrypotter',
    Authors: [ 'arun' ],
    price: 700
  },
  {
    _id: ObjectId("653e0e12491bd2e955531734"),
    id: 2,
    bookname: 'html',
    Authors: [ 'kailas aj' ],
    price: 600
  },
  {
    _id: ObjectId("653e0ee2491bd2e95553173a"),
    id: 8,
    bookname: 'ironman',
    Authors: [ 'marks' ],
    price: 300
  },
  {
    _id: ObjectId("653e0e12491bd2e955531735"),
    id: 3,
    bookname: 'java',
    Authors: [ 'kailas aj' ],
    price: 500
  },
  {
    _id: ObjectId("653e0e12491bd2e955531733"),
    id: 1,
    bookname: 'mongodbpartice',
    Authors: [ 'kailas aj' ],
    price: 500
  },
  {
    _id: ObjectId("653e0f2a491bd2e95553173c"),
    id: 10,
    bookname: 'police',
    Authors: [ 'ironsid' ],
    price: 700
  },
  {
    _id: ObjectId("653e0e7a491bd2e955531737"),
    id: 5,
    bookname: 'potter',
    Authors: [ 'geetha', 'manu' ],
    price: 800
  },
  {
    _id: ObjectId("653e0ea6491bd2e955531738"),
    id: 6,
    bookname: 'spiderman',
    Authors: [ 'arjun' ],
    price: 100
  }
]
bookstore>
8 Write a MongoDB query to know whether the author in the authors list.


bookstore> db.books.find({ authors: "AuthorName" }).count() > 0
false


9. Write a MongoDB query to update & increase the book price Rs.500 in all book name as "MongoDB Practice"

bookstore> db.books.update({ B_title: "MongoDB Practice" }, { $inc: { price: 500 } }, { multi: true })
DeprecationWarning: Collection.update() is deprecated. Use updateOne, updateMany, or bulkWrite.
{
  acknowledged: true,
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 0

10. Write a MongoDB query to use Update modifiers ($Set, $push, $pull, $setOnInsert, $upsert) in bookstore.
set

    • $set
bookstore> db.books.update({ bookname: "Book 1" }, { $set: { price: 1200 } })
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
    • $push
bookstore> db.books.update({ bookname: "Book 2" }, { $push: { authors: "New Author" } })
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
bookstore>
    • $pull
bookstore> db.books.update({ bookname: "Book 3" }, { $pull: { authors: "Author 1" } })
{
  acknowledged: true,
  insertedId: null,
  matchedCount: 1,
  modifiedCount: 1,
  upsertedCount: 0
}
    $setOnInsert
bookstore> db.books.update({ bookname: "New Book" }, { $setOnInsert: { publication_year: 2023 } }, { upsert: true })
{
  acknowledged: true,
  insertedId: ObjectId("653df6981b9200a33f9e3a47"),
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 1
}
    • $upsert
bookstore> db.books.update({ bookname: "Non-Existent Book" }, { $set: { price: 900 } }, { upsert: true })
{
  acknowledged: true,
  insertedId: ObjectId("653df6cd1b9200a33f9e3a57"),
  matchedCount: 0,
  modifiedCount: 0,
  upsertedCount: 1
}

